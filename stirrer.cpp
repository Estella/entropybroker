#include <string.h>
#include <openssl/blowfish.h>
#include <openssl/rand.h>

#include "error.h"
#include "utils.h"
#include "stirrer.h"

stirrer::stirrer()
{
}

stirrer::~stirrer()
{
}

void stirrer::do_stir(unsigned char *ivec, unsigned char *target, int target_size, unsigned char *data_in, int data_in_size, unsigned char *temp_buffer, bool direction)
{
	unsigned char temp_key[56];

	if (data_in_size > get_stir_size())
		error_exit("Invalid stir-size %d (expected: %d)", data_in_size, get_stir_size());

	memcpy(temp_key, data_in, data_in_size);
	if (data_in_size < 4) // minimum blowfish key size
	{
		// these generated bytes are not counted in the entropy
		// estimation
		if (RAND_bytes(&temp_key[data_in_size], 4 - data_in_size) == 0)
			error_exit("RAND_bytes failed");
	}

	BF_KEY key;
	BF_set_key(&key, max(4, data_in_size), temp_key);
	int ivec_offset = 0;
	BF_cfb64_encrypt(target, temp_buffer, target_size, &key, ivec, &ivec_offset, direction ? BF_ENCRYPT : BF_DECRYPT);
	memcpy(target, temp_buffer, target_size);
}

int stirrer::get_stir_size() const
{
	return 56; // BLOWFISH
}
