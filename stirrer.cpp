#include <string.h>
#include <openssl/blowfish.h>
#include <openssl/rand.h>

#include "error.h"
#include "utils.h"
#include "stirrer.h"

stirrer::stirrer()
{
}

stirrer::~stirrer()
{
}

void stirrer::do_stir(unsigned char *ivec, unsigned char *what, int n, unsigned char *temp_buffer, bool direction)
{
	unsigned char temp_key[56];

	memcpy(temp_key, what, n);
	if (n < 4) // minimum blowfish key size
	{
		// these generated bytes are not counted in the entropy
		// estimation
		if (RAND_bytes(&temp_key[n], 4 - n) == 0)
			error_exit("RAND_bytes failed");
	}

	BF_KEY key;
	BF_set_key(&key, max(4, n), temp_key);
	int ivec_offset = 0;
	BF_cfb64_encrypt(what, temp_buffer, n, &key, ivec, &ivec_offset, direction ? BF_ENCRYPT : BF_DECRYPT);
	memcpy(what, temp_buffer, n);
}

int stirrer::get_stir_size() const
{
	return 56; // BLOWFISH
}
